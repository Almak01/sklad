import os
import telebot
from telebot import types
import sqlite3
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

bot = telebot.TeleBot(BOT_TOKEN)

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("parts.db", check_same_thread=False)
cursor = conn.cursor()

# üîπ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute("""
    CREATE TABLE IF NOT EXISTS parts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        quantity INTEGER NOT NULL
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        part_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        taken_by TEXT NOT NULL,
        transaction_type TEXT NOT NULL,  -- "add" –∏–ª–∏ "issue"
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (part_id) REFERENCES parts(id)
    )
""")
conn.commit()

# üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
@bot.message_handler(commands=['start'])
def start(message):
    logging.debug("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    add_button = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å")
    list_button = types.KeyboardButton("üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π")
    issue_button = types.KeyboardButton("üõ† –í—ã–¥–∞—á–∞ –∑–∞–ø—á–∞—Å—Ç–∏")
    report_button = types.KeyboardButton("üìä –û—Ç—á–µ—Ç")
    markup.add(add_button, list_button, issue_button, report_button)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å–∫–ª–∞–¥–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π. \n"
                                      "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:", reply_markup=markup)

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π"
@bot.message_handler(func=lambda message: message.text == "üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π")
def list_parts(message):
    try:
        logging.debug("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π")
        
        cursor.execute("SELECT id, name, quantity FROM parts")
        parts = cursor.fetchall()

        if not parts:
            logging.debug("–°–∫–ª–∞–¥ –ø—É—Å—Ç.")
            bot.send_message(message.chat.id, "üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç.")
            return

        text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π:\n\n"  # –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞
        for part in parts:
            part_id, name, quantity = part
            text += f"üîπ ID {part_id}: {name} - {quantity} —à—Ç.\n"

        logging.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π")
        bot.send_message(message.chat.id, text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π: {e}")
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π.")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å"
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å")
def add_part(message):
    try:
        logging.debug("–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏.")
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏:")
        bot.register_next_step_handler(message, process_name)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏: {e}")
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—á–∞—Å—Ç–∏.")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–∏
def process_name(message):
    try:
        name = message.text
        logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {name}")
        
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
        bot.register_next_step_handler(msg, process_quantity, name)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–∏: {e}")
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—á–∞—Å—Ç–∏.")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—á–∞—Å—Ç–∏
def process_quantity(message, name):
    try:
        quantity = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        logging.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–ø—á–∞—Å—Ç–∏ {name}: {quantity}")
        
        cursor.execute("INSERT INTO parts (name, quantity) VALUES (?, ?)", (name, quantity))
        conn.commit()

        bot.send_message(message.chat.id, f"‚úÖ –ó–∞–ø—á–∞—Å—Ç—å '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {quantity}.")

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—á–∞—Å—Ç–∏: {e}")
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—á–∞—Å—Ç–∏.")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–¥–∞—á–∞ –∑–∞–ø—á–∞—Å—Ç–∏"
@bot.message_handler(func=lambda message: message.text == "üõ† –í—ã–¥–∞—á–∞ –∑–∞–ø—á–∞—Å—Ç–∏")
def issue_part(message):
    try:
        logging.debug("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É –∑–∞–ø—á–∞—Å—Ç–∏.")
        
        cursor.execute("SELECT id, name, quantity FROM parts")
        parts = cursor.fetchall()

        if not parts:
            logging.debug("–°–∫–ª–∞–¥ –ø—É—Å—Ç.")
            bot.send_message(message.chat.id, "üì≠ –°–∫–ª–∞–¥ –ø—É—Å—Ç.")
            return

        text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –≤—ã–¥–∞—á–∏:\n\n"
        for part in parts:
            part_id, name, quantity = part
            if quantity > 0:
                text += f"üîπ ID {part_id}: {name} - {quantity} —à—Ç.\n"

        logging.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –≤—ã–¥–∞—á–∏.")
        bot.send_message(message.chat.id, text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤—ã–¥–∞—á–∏:")

        bot.register_next_step_handler(message, process_issue_part)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—ã–¥–∞—á—É –∑–∞–ø—á–∞—Å—Ç–∏: {e}")
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∑–∞–ø—á–∞—Å—Ç–∏.")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–¥–∞—á—É –∑–∞–ø—á–∞—Å—Ç–∏
def process_issue_part(message):
    try:
        part_id = int(message.text)
        logging.debug(f"–í—ã–¥–∞—á–∞ –∑–∞–ø—á–∞—Å—Ç–∏ —Å ID: {part_id}")
        
        cursor.execute("SELECT id, name, quantity FROM parts WHERE id = ?", (part_id,))
        part = cursor.fetchone()

        if part:
            part_id, name, quantity = part
            if quantity > 0:
                bot.send_message(message.chat.id, f"–ó–∞–ø—á–∞—Å—Ç—å '{name}' –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
                bot.register_next_step_handler(message, process_taken_by, part_id)
            else:
                bot.send_message(message.chat.id, "‚ö† –ó–∞–ø—á–∞—Å—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –Ω–∞ —Å–∫–ª–∞–¥–µ.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ó–∞–ø—á–∞—Å—Ç—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø—á–∞—Å—Ç–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–¥–∞—á—É –∑–∞–ø—á–∞—Å—Ç–∏: {e}")
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∑–∞–ø—á–∞—Å—Ç–∏.")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è
def process_taken_by(message, part_id):
    try:
        taken_by = message.text
        logging.debug(f"–ó–∞–ø—á–∞—Å—Ç—å –≤—ã–¥–∞–Ω–∞ {taken_by}")
        
        cursor.execute("SELECT name, quantity FROM parts WHERE id = ?", (part_id,))
        part = cursor.fetchone()

        if part:
            name, quantity = part
            cursor.execute("UPDATE parts SET quantity = quantity - 1 WHERE id = ?", (part_id,))
            cursor.execute("INSERT INTO transactions (part_id, quantity, taken_by, transaction_type) VALUES (?, ?, ?, 'issue')", 
                           (part_id, 1, taken_by))
            conn.commit()

            bot.send_message(message.chat.id, f"‚úÖ –ó–∞–ø—á–∞—Å—Ç—å '{name}' –≤—ã–¥–∞–Ω–∞ {taken_by}.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ó–∞–ø—á–∞—Å—Ç—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∑–∞–ø—á–∞—Å—Ç–∏: {e}")
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∑–∞–ø—á–∞—Å—Ç–∏.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logging.debug("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
    bot.polling(none_stop=True)
