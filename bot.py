import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import os

TOKEN = os.getenv("BOT_TOKEN")  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("parts.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
cursor.execute("""
    CREATE TABLE IF NOT EXISTS parts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        quantity INTEGER NOT NULL
    )
""")
conn.commit()

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å"), KeyboardButton("üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π"))

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Å–∫–ª–∞–¥–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π!", reply_markup=kb)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏
@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å")
async def add_part(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø—Ä–∏–º–µ—Ä: –§–∏–ª—å—Ç—Ä 5)")

@dp.message_handler()
async def process_part(message: types.Message):
    try:
        name, quantity = message.text.rsplit(" ", 1)
        quantity = int(quantity)

        cursor.execute("INSERT INTO parts (name, quantity) VALUES (?, ?)", (name, quantity))
        conn.commit()

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø—á–∞—Å—Ç—å: {name}, {quantity} —à—Ç.")
    except:
        await message.answer("‚ö† –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ`")

# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
@dp.message_handler(lambda message: message.text == "üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π")
async def list_parts(message: types.Message):
    cursor.execute("SELECT name, quantity FROM parts")
    parts = cursor.fetchall()

    if not parts:
        await message.answer("–°–∫–ª–∞–¥ –ø—É—Å—Ç.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π:\n\n"
    for name, quantity in parts:
        text += f"üîπ {name}: {quantity} —à—Ç.\n"

    await message.answer(text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
