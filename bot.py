import asyncio
import os
import sqlite3
import logging
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏)
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º)
conn = sqlite3.connect("parts.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS parts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    quantity INTEGER NOT NULL
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS issued_parts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    part_name TEXT NOT NULL,
    quantity INTEGER NOT NULL,
    issued_to TEXT NOT NULL,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")
conn.commit()
conn.close()

# üìå –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddPart(StatesGroup):
    name = State()
    quantity = State()

class IssuePart(StatesGroup):
    number = State()
    quantity = State()
    issued_to = State()

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏)
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π")],
        [KeyboardButton(text="üîª –í—ã–¥–∞—á–∞ –∑–∞–ø—á–∞—Å—Ç–∏")],
        [KeyboardButton(text="üìä –û—Ç—á–µ—Ç")]
    ],
    resize_keyboard=True
)

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ (–∑–∞–ø—É—Å–∫ FSM)
@dp.message(Text("üì¶ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å"))
async def add_part_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏:")
    await state.set_state(AddPart.name)

@dp.message(AddPart.name)
async def add_part_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π:")
    await state.set_state(AddPart.quantity)

@dp.message(AddPart.quantity)
async def add_part_quantity(message: types.Message, state: FSMContext):
    data = await state.get_data()
    part_name = data["name"]
    quantity = int(message.text)

    conn = sqlite3.connect("parts.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO parts (name, quantity) VALUES (?, ?)", (part_name, quantity))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –ó–∞–ø—á–∞—Å—Ç—å '{part_name}' ({quantity} —à—Ç.) –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu)
    await state.clear()

# üìå –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
@dp.message(Text("üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π"))
async def list_parts(message: types.Message):
    conn = sqlite3.connect("parts.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, quantity FROM parts")
    parts = cursor.fetchall()
    conn.close()

    if not parts:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø—É—Å—Ç.")
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π:\n"
        for part in parts:
            text += f"{part[0]}. {part[1]} ‚Äî {part[2]} —à—Ç.\n"
        await message.answer(text, reply_markup=main_menu)

# üìå –í—ã–¥–∞—á–∞ –∑–∞–ø—á–∞—Å—Ç–∏ (–∑–∞–ø—É—Å–∫ FSM)
@dp.message(Text("üîª –í—ã–¥–∞—á–∞ –∑–∞–ø—á–∞—Å—Ç–∏"))
async def issue_part_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤—ã–¥–∞—á–∏:")
    await state.set_state(IssuePart.number)

@dp.message(IssuePart.number)
async def issue_part_number(message: types.Message, state: FSMContext):
    part_id = int(message.text)

    conn = sqlite3.connect("parts.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, quantity FROM parts WHERE id=?", (part_id,))
    part = cursor.fetchone()
    conn.close()

    if part:
        await state.update_data(number=part_id, part_name=part[0], available=part[1])
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤ –Ω–∞–ª–∏—á–∏–∏ {part[1]} —à—Ç.):")
        await state.set_state(IssuePart.quantity)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø—á–∞—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)
        await state.clear()

@dp.message(IssuePart.quantity)
async def issue_part_quantity(message: types.Message, state: FSMContext):
    data = await state.get_data()
    quantity = int(message.text)

    if quantity > data["available"]:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø—á–∞—Å—Ç–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ.")
        return

    await state.update_data(quantity=quantity)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await state.set_state(IssuePart.issued_to)

@dp.message(IssuePart.issued_to)
async def issue_part_to(message: types.Message, state: FSMContext):
    data = await state.get_data()
    issued_to = message.text

    conn = sqlite3.connect("parts.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE parts SET quantity = quantity - ? WHERE id=?", (data["quantity"], data["number"]))
    cursor.execute("INSERT INTO issued_parts (part_name, quantity, issued_to) VALUES (?, ?, ?)", 
                   (data["part_name"], data["quantity"], issued_to))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –í—ã–¥–∞–Ω–æ {data['quantity']} —à—Ç. {data['part_name']} ‚Äî {issued_to}.", reply_markup=main_menu)
    await state.clear()

# üìå –û—Ç—á–µ—Ç –≤ Excel
@dp.message(Text("üìä –û—Ç—á–µ—Ç"))
async def generate_report(message: types.Message):
    conn = sqlite3.connect("parts.db")
    df = pd.read_sql_query("SELECT part_name, quantity, issued_to, date FROM issued_parts WHERE strftime('%Y-%m', date) = strftime('%Y-%m', 'now')", conn)
    conn.close()

    if df.empty:
        await message.answer("üì≠ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–∞–≤–∞–ª–æ—Å—å.")
        return

    filename = "–û—Ç—á–µ—Ç_–≤—ã–¥–∞—á–∏.xlsx"
    df.to_excel(filename, index=False)

    await message.answer_document(types.FSInputFile(filename))

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (aiogram 3.x)
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
