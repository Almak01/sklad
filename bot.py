import asyncio
import os
import logging
import sqlite3
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("parts.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS parts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    quantity INTEGER NOT NULL
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    part_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    taken_by TEXT NOT NULL,
    transaction_type TEXT NOT NULL,  -- "add" –∏–ª–∏ "issue"
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (part_id) REFERENCES parts(id)
)
""")
conn.commit()
conn.close()

# üìå –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–Ω–µ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è)
main_menu = ReplyKeyboardMarkup(
    resize_keyboard=True,
    one_time_keyboard=False,
    is_persistent=True
)

main_menu.add(
    KeyboardButton("üì¶ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å"),
    KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π"),
    KeyboardButton("üîª –í—ã–¥–∞—á–∞ –∑–∞–ø—á–∞—Å—Ç–∏"),
    KeyboardButton("üìä –û—Ç—á–µ—Ç")
)

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏
@dp.message_handler(lambda message: message.text == "üì¶ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å")
async def add_part(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏:")
    dp.register_message_handler(get_part_name, state="add_part_name")

async def get_part_name(message: types.Message):
    part_name = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    dp.register_message_handler(lambda msg: save_part(msg, part_name), state="add_part_quantity")

async def save_part(message: types.Message, part_name):
    try:
        quantity = int(message.text)
        conn = sqlite3.connect("parts.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO parts (name, quantity) VALUES (?, ?)", (part_name, quantity))
        conn.commit()
        conn.close()
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø—á–∞—Å—Ç—å: {part_name} (–∫–æ–ª-–≤–æ: {quantity})", reply_markup=main_menu)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# üìå –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π")
async def list_parts(message: types.Message):
    conn = sqlite3.connect("parts.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, quantity FROM parts")
    parts = cursor.fetchall()
    conn.close()

    if not parts:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø—É—Å—Ç.")
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π:\n"
        for part in parts:
            text += f"{part[0]}. {part[1]} ‚Äî {part[2]} —à—Ç.\n"
        await message.answer(text, reply_markup=main_menu)

# üìå –í—ã–¥–∞—á–∞ –∑–∞–ø—á–∞—Å—Ç–∏
@dp.message_handler(lambda message: message.text == "üîª –í—ã–¥–∞—á–∞ –∑–∞–ø—á–∞—Å—Ç–∏")
async def issue_part(message: types.Message):
    conn = sqlite3.connect("parts.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, quantity FROM parts WHERE quantity > 0")
    parts = cursor.fetchall()
    conn.close()

    if not parts:
        await message.answer("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π.")
        return

    text = "üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤—ã–¥–∞—á–∏:\n"
    for part in parts:
        text += f"{part[0]}. {part[1]} ‚Äî {part[2]} —à—Ç.\n"

    await message.answer(text)
    dp.register_message_handler(get_issue_part, state="issue_part_id")

async def get_issue_part(message: types.Message):
    try:
        part_id = int(message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–¥–∞—á–∏:")
        dp.register_message_handler(lambda msg: get_issue_quantity(msg, part_id), state="issue_quantity")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø—á–∞—Å—Ç–∏.")

async def get_issue_quantity(message: types.Message, part_id):
    try:
        quantity = int(message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
        dp.register_message_handler(lambda msg: confirm_issue(msg, part_id, quantity), state="issue_person")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

async def confirm_issue(message: types.Message, part_id, quantity):
    taken_by = message.text
    conn = sqlite3.connect("parts.db")
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏
    cursor.execute("SELECT name, quantity FROM parts WHERE id = ?", (part_id,))
    part = cursor.fetchone()

    if not part or part[1] < quantity:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø—á–∞—Å—Ç–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ.")
        conn.close()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    new_quantity = part[1] - quantity
    cursor.execute("UPDATE parts SET quantity = ? WHERE id = ?", (new_quantity, part_id))

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    cursor.execute("INSERT INTO transactions (part_id, quantity, taken_by, transaction_type) VALUES (?, ?, ?, 'issue')",
                   (part_id, quantity, taken_by))

    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –í—ã–¥–∞–Ω–æ {quantity} —à—Ç. {part[0]} –ø–æ–ª—É—á–∞—Ç–µ–ª—é: {taken_by}", reply_markup=main_menu)

# üìå –û—Ç—á–µ—Ç –≤ Excel
@dp.message_handler(lambda message: message.text == "üìä –û—Ç—á–µ—Ç")
async def generate_report(message: types.Message):
    conn = sqlite3.connect("parts.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_month = datetime.now().strftime("%Y-%m")
    cursor.execute("""
        SELECT p.name, t.quantity, t.taken_by, t.date
        FROM transactions t
        JOIN parts p ON t.part_id = p.id
        WHERE strftime('%Y-%m', t.date) = ?
    """, (current_month,))
    transactions = cursor.fetchall()
    conn.close()

    if not transactions:
        await message.answer("üì≠ –ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –≤—ã–¥–∞—á –Ω–µ –±—ã–ª–æ.")
        return

    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    df = pd.DataFrame(transactions, columns=["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–§–ò–û", "–î–∞—Ç–∞"])
    file_path = "report.xlsx"
    df.to_excel(file_path, index=False)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    with open(file_path, "rb") as report:
        await bot.send_document(message.chat.id, report, caption="üìä –û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
